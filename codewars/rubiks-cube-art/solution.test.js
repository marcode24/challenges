const cube = require('./solution');

describe("Rubik's cube art", () => {
  const testCases = [
    {
      input: 1,
      output: '/\\_\\\n\\/_/',
    },
    {
      input: 5,
      output: '    /\\_\\_\\_\\_\\_\\\n   /\\/\\_\\_\\_\\_\\_\\\n  '
      + '/\\/\\/\\_\\_\\_\\_\\_\\\n /\\/\\/\\/\\_\\_\\_\\_\\_\\\n'
      + '/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\\n\\/\\/\\/\\/\\/_/_/_/_/_/\n'
      + ' \\/\\/\\/\\/_/_/_/_/_/\n  \\/\\/\\/_/_/_/_/_/\n   '
      + '\\/\\/_/_/_/_/_/\n    \\/_/_/_/_/_/',
    },
    {
      input: 8,
      output: '       /\\_\\_\\_\\_\\_\\_\\_\\_\\\n      '
      + '/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\\n     '
      + '/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\\n    '
      + '/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\\n   '
      + '/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\\n  '
      + '/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\\n '
      + '/\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '/\\/\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '\\/\\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/\n '
      + '\\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/\n  '
      + '\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/\n   '
      + '\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/\n'
      + '    \\/\\/\\/\\/_/_/_/_/_/_/_/_/\n'
      + '     \\/\\/\\/_/_/_/_/_/_/_/_/\n'
      + '      \\/\\/_/_/_/_/_/_/_/_/\n'
      + '       \\/_/_/_/_/_/_/_/_/',
    },
    {
      input: 9,
      output: '        /\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '       /\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '      /\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '     /\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '    /\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '   /\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '  /\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + ' /\\/\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '/\\/\\/\\/\\/\\/\\/\\/\\/\\_\\_\\_\\_\\_\\_\\_\\_\\_\\\n'
      + '\\/\\/\\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n'
      + ' \\/\\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n'
      + '  \\/\\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n'
      + '   \\/\\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n'
      + '    \\/\\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n'
      + '     \\/\\/\\/\\/_/_/_/_/_/_/_/_/_/\n'
      + '      \\/\\/\\/_/_/_/_/_/_/_/_/_/\n'
      + '       \\/\\/_/_/_/_/_/_/_/_/_/\n'
      + '        \\/_/_/_/_/_/_/_/_/_/',
    },
  ];

  it('should return a string type', () => {
    expect(typeof cube(1)).toBe('string');
  });

  it.each(testCases)('should return a cube with size $input', (testCase) => {
    expect(cube(testCase.input)).toBe(testCase.output);
  });
});
